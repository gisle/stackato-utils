#!perl

use strict;
use ActiveState::Path qw(find_prog);
use ActiveState::Run qw(shell_quote);
use Stackato::AppInfo qw(dot_stackato);


(my $PROGNAME = $0) =~ s,.*[\\/],,;
my $STACKATO_CMD;

my $CMD = shift || usage();
$CMD = "version" if $CMD eq "--version";

my $do_cmd = "do_$CMD";
unless (defined &$do_cmd) {
    require Text::Abbrev;
    my @cmds;
    for my $name (keys %main::) {
        push(@cmds, $name) if $name =~ s/^do_//;
    }
    my $abbrev = Text::Abbrev::abbrev(@cmds);
    if (my $cmd = $abbrev->{$CMD}) {
        $do_cmd = "do_$cmd";
    }
    else {
        require Text::Wrap;
        usage(Text::Wrap::wrap("", "  ",
                  "Unrecognized $PROGNAME command '$CMD'; try one of " .
                  join(", ", sort @cmds)
              )
        );
    }
}

eval {
    no strict 'refs';
    &$do_cmd;
};
if ($@) {
    print STDERR "$PROGNAME $CMD failed: " . clean_err($@) . "\n";
    exit 1;
}
else {
    exit;
}

my $USAGE;
sub usage {
    my $msg = shift;
    if ($msg) {
        $msg .= "\n" unless $msg =~ /\n$/;
        print STDERR $msg;
    }
    $USAGE ||= "<cmd> <arg>...";
    print STDERR "Usage:\t$PROGNAME $USAGE\n";
    print STDERR "\tRun '$PROGNAME help" . ($USAGE =~ /^(\w+)/ ? " $1" : "") . "' to learn more.\n";
    exit 1;
}

sub clean_err {
    my $err = shift;
    # $err =~ s/ at .*//s;
    $err =~ s/ _at / at /g; # escape for when you really want "at" in the message
    $err =~ s/\n*\z//;
    return $err;
}

sub _stackato_cmd {
    unless ($STACKATO_CMD) {
	$STACKATO_CMD = find_prog("stackato") || die "Abort: Can't find stackato command\n";
    }
}

sub stackato_run {
    die "Assert" unless @_;
    _stackato_cmd();
    my @ARGV = @_;
    print ">>> $STACKATO_CMD @ARGV\n" unless $ARGV[0] =~ s/^\@//;
    system($STACKATO_CMD, @ARGV);
}

sub stackato_json {
    die "Assert" unless @_;
    _stackato_cmd();
    require JSON;
    open(my $fh, "$STACKATO_CMD --json " . shell_quote(@_) . "|");
    local $/;
    return JSON::decode_json(scalar <$fh>);
}

sub get_info {
    my $info = dot_stackato() || die "No stackato app pushed from this directory";
    my $fast = shift;
    unless ($fast) {
	my $apps = stackato_json("apps");
	for my $app (@$apps) {
	    if ($app->{name} eq $info->{appname}) {
		$info->{deployed} = $app;
		last;
	    }
	}
    }
    return $info;
}

sub get_appname {
    return get_info(1)->{appname} || die "Assert";
}

sub do_help {
    if (@ARGV > 1) {
        $USAGE = "help [<subcommand>]";
        usage();
    }
    my $pod2text = qq("$^X" -MPod::Text -e "Pod::Text->new->parse_from_filehandle");
    my $pager = $ENV{PAGER} || "more";
    open(my $fh, "<", __FILE__) || die "Can't open " . __FILE__ . ": $!";
    if (@ARGV) {
        my $cmd = shift(@ARGV);
        my $foundit;
        while (<$fh>) {
            if (/^=item B<$PROGNAME \Q$cmd\E\b/o) {
                $foundit++;
                last;
            }
        }
        if ($foundit) {
            open(my $out, "| $pod2text | $pager");
            print $out "=over\n\n";
            print $out $_;
            my $over_depth = 0;
            while (<$fh>) {
                last if /^=item B<$PROGNAME (?!\Q$cmd\E\b)/o;
                if (/^=back\b/) {
                    last if $over_depth == 0;
                    $over_depth--;
                }
                elsif (/^=over\b/) {
                    $over_depth++;
                }
                print $out $_;
            }
            print $out "\n\n=back\n";
            close($out);
        }
        else {
            print "Sorry, no help for '$cmd'\n";
        }
    }
    else {
        open(my $out, qq(| $pod2text | $pager));
        while (<$fh>) {
            print $out $_;
        }
        close($out);
    }
}

sub do_info {
    my $info = get_info();
    use Data::Dump;
    dd $info;
}

sub do_push {
    $USAGE = "push [<appname>]";
    my $info = dot_stackato();
    if ($info) {
	if (@ARGV) {
	    my $appname = shift(@ARGV);
	    usage() if @ARGV;
	    if ($appname ne $info->{appname}) {
		# rename
		stackato_run("rename", $info->{appname}, $appname);
		$info->{appname} = $appname;
		dot_stackato($info);  # save it
		return;
	    }
	}
	stackato_run("update", $info->{appname});
    }
    else {
	my $appname = shift(@ARGV) || usage();
	usage() if @ARGV;
	stackato_run("push", $appname);
	dot_stackato({
	    appname => $appname,
	    target => stackato_json("target")->{target},
	});
    }
}

sub do_delete {
    $USAGE = "delete";
    usage() if @ARGV;
    my $info = get_info(1);
    stackato_run("delete", $info->{appname});
    unlink($info->{appfile});
}

sub do_start {
    $USAGE = "start";
    usage() if @ARGV;
    stackato_run("start", get_appname());
}

sub do_stop {
    $USAGE = "stop";
    usage() if @ARGV;
    stackato_run("stop", get_appname());
}

sub do_status {
    $USAGE = "stop";
    usage() if @ARGV;
    stackato_run("stats", get_appname());
}

sub do_run {
    $USAGE = "run <cmd> [<arg>...]";
    usage() if @ARGV < 1;
    stackato_run("run", get_appname(), @ARGV);
}

sub do_open {
    $USAGE = "open";
    usage() if @ARGV;
    my $info = get_info();
    my $uri = $info->{deployed}{uris}[0];
    $uri = "http://" . $uri unless $uri =~ s/^https?://;
    require ActiveState::Browser;
    ActiveState::Browser::open($uri);
}

sub _dbi {
    usage() if @ARGV > 1;
    my $info = get_info();
    require Stackato::DBI;
    my($dsn, $user, $pass) = Stackato::DBI->credentials(shift(@ARGV), $info->{deployed}{services_connect_info});
    return $dsn, $user, $pass;
}

sub do_dbi {
    $USAGE = "dbi [<service>]";
    print join(" ", _dbi()), "\n";
}

sub do_dbish {
    $USAGE = "dbish [<service>]";
    my $dbish = find_prog("dbish");
    unless ($dbish) {
	die "Can't locate the dbish command; you can install it with 'ppm install DBI::Shell'";
    }
    exec $dbish, _dbi();
}

sub do_dbshell {
    $USAGE = "dbshell [<service>]";
    usage() if @ARGV > 1;
    require Stackato::Services;
    my $conn_info = stackato_json("service-conn", get_appname(), @ARGV);
    my $cred = $conn_info->{credentials};

    my @cmd;
    if ($conn_info->{label} =~ /^mysql/) {
	@cmd = (
	    "mysql",
	    "-h", $cred->{hostname}, "--port", $cred->{port},
	    "-u", $cred->{user}, "-p$cred->{password}",
	    $cred->{name});
    }
    elsif ($conn_info->{lable} =~ /^postgresql/) {
	@cmd = (
	    "psql", "-w",
	    "-l", $cred->{hostname}, "-p", $cred->{port},
	    "-U", $cred->{user},
	    "-d", $cred->{name},
	);
	$ENV{PGPASSWORD} = $cred->{password};
    }
    else {
	die "Don't know how to connect to $conn_info->{label}";
    }

    my $prog = find_prog($cmd[0]);
    unless ($prog) {
	die "Can't find the $cmd[0] command";
    }
    $cmd[0] = $prog;
    exec(@cmd);
}

sub do_target {
    $_ = stackato_json("target");
    print $_->{target}, "\n";
}

sub do_version {
    require Stackato::Utils;
    print "$PROGNAME $Stackato::Utils::VERSION\n";
    stackato_run("\@version");
}

__END__

=head1 NAME

sto - Stackato command line interface (alternative edition)

=head1 DESCRIPTION

The C<sto> command is a wrapper for the Stackato command line client C<stackato>.
The C<stackato> command have chosen to stay compatible with "vmc" (the Cloud
Foundery client), while C<sto> just does what Gisle found conveinient.

The following commands sub-commands are recognized:

=over

=item B<sto dbi> [ I<service> ]

Prints the parameters that Perl's DBI need to connect to a database for the
current application.  The 3 values printed are the DSN, the username and the
password.

If I<service> is provided print parameters for that database.  If not select
the first relational database service.

=item B<sto dbish> [ I<service> ]

Invoke the C<dbish> for the given I<service>.  The C<dbish> is an interactive
shell where you can send SQL commands to the database and see the results.

=item B<sto dbshell> [ I<service> ]

Invoke the native shell command for the database of the current application.
This is similar to dbish but you get a shell that is database specific.

Unlike B<sto dbish> this command require I<service> to be specified if you
have bound multiple services to the current application.

=item B<sto delete>

Remove the current app from Stackato.

=item B<sto help> [ I<command> ]

Prints the documentation.  If a I<command> is given print the documentation for
that command only.

=item B<sto info>

Print information about the current application

=item B<sto open>

Open the current application in the default web browser.

=item B<sto push> [ I<appname> ]

Deploy the app in the current directory to Stackato.
The I<appname> only needs to be given the first time the app is deployed.

After a push B<sto> remembers what name you pushed your app as.  This sets it
as the current application as long as you are within the application directory
when you invoke this and other B<sto> commands.

=item B<sto run> I<cmd> [ I<arg> ... ]

Run the given command in the cloud in context of the current application.

=item B<sto start>

Start the current application.

=item B<sto status>

Print the status for the current application.

=item B<sto stop>

Stop the current application.

=item B<sto version>

Print the version number and exit

=back

=head1 SEE ALSO

L<http://www.activestate.com/stackato>
